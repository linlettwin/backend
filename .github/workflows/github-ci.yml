name: "First CI/CD with GitHub"

on:
  push:
    tags:
    - 'v*'    

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_DEFAULT_REGION }}
            
        - name: Build Docker image
          env:
            IMAGE_TAG: latest
          run: |
            DOCKER_TAG=$(echo "${GITHUB_REF}" | cut -d'/' -f 3)
            docker build -t gic-dx-its-mgt-backend-api-gateway:$IMAGE_TAG .
            docker tag gic-dx-its-mgt-backend-api-gateway:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}api-gateway:${DOCKER_TAG}
            docker tag gic-dx-its-mgt-backend-api-gateway:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}api-gateway:$IMAGE_TAG

            docker build -t gic-dx-its-mgt-backend-customers-japan:$IMAGE_TAG .
            docker tag gic-dx-its-mgt-backend-customers-japan:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}customers-japan:${DOCKER_TAG}
            docker tag gic-dx-its-mgt-backend-customers-japan:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}customers-japan:$IMAGE_TAG

            docker build -t gic-dx-its-mgt-backend-employees:$IMAGE_TAG .
            docker tag gic-dx-its-mgt-backend-employees:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}employees:${DOCKER_TAG}
            docker tag gic-dx-its-mgt-backend-employees:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}employees:$IMAGE_TAG

            docker build -t gic-dx-its-mgt-backend-employees-japan:$IMAGE_TAG .
            docker tag gic-dx-its-mgt-backend-employees-japan:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}employees-japan:${DOCKER_TAG}
            docker tag gic-dx-its-mgt-backend-employees-japan:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}employees-japan:$IMAGE_TAG

        - name: Authenticate to Amazon ECR
          run: |
            aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION}} | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY }}

        - name: Push Docker image to Amazon ECR
          run: |
            DOCKER_TAG=$(echo "${GITHUB_REF}" | cut -d'/' -f 3)
            docker push ${{ vars.ECR_REPOSITORY }}api-gateway:${DOCKER_TAG}
            docker push ${{ vars.ECR_REPOSITORY }}api-gateway:latest

            docker push ${{ vars.ECR_REPOSITORY }}customers-japan:${DOCKER_TAG}
            docker push ${{ vars.ECR_REPOSITORY }}customers-japan:latest

            docker push ${{ vars.ECR_REPOSITORY }}employees:${DOCKER_TAG}
            docker push ${{ vars.ECR_REPOSITORY }}employees:latest

            docker push ${{ vars.ECR_REPOSITORY }}employees-japan:${DOCKER_TAG}
            docker push ${{ vars.ECR_REPOSITORY }}employees-japan:latest

    deploy:
      needs: build
      runs-on: ubuntu-latest

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      
      - name: Set up kubectl for Amazon EKS
        run: aws eks --region ${{ vars.AWS_DEFAULT_REGION}} update-kubeconfig --name ${{ vars.AWS_EKS_CLUSTER_NAME}}

      - name: Deploy to Amazon EKS
        run: |
          kubectl delete -f employees-deployment.yml --namespace ${{ vars.AWS_EKS_NAMESPACE}}
          kubectl apply -f employees-deployment.yml --namespace ${{ vars.AWS_EKS_NAMESPACE}}

    